name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        type: string
      push:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-tag: ${{ steps.version.outputs.is-tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${{ github.ref_name }}
            IS_TAG=true
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION=${{ github.event.inputs.version }}
            IS_TAG=false
          else
            VERSION=$(node -e "console.log(require('./version.json').version)")
            IS_TAG=false
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-tag=$IS_TAG" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION (is-tag: $IS_TAG)"

  build:
    runs-on: ubuntu-latest
    needs: extract-version
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        continue-on-error: true

      - name: Log in to Container Registry
        if: ${{ github.event_name == 'push' && needs.extract-version.outputs.is-tag == 'true' || github.event.inputs.push == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' && needs.extract-version.outputs.is-tag == 'true' || github.event.inputs.push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ needs.extract-version.outputs.version }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=VSCE
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.extract-version.outputs.version }}

      - name: Generate image attestation
        if: ${{ github.event_name == 'push' && needs.extract-version.outputs.is-tag == 'true' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  test-image:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' || github.event.inputs.push != 'true' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run container tests
        run: |
          # Build image for testing
          docker build -t vsce-test .
          
          # Test container startup
          docker run -d --name vsce-test -p 8080:8080 vsce-test
          sleep 10
          
          # Test health check
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "Container health check passed"
          else
            echo "Container health check failed"
            docker logs vsce-test
            exit 1
          fi
          
          # Cleanup
          docker stop vsce-test
          docker rm vsce-test
          docker rmi vsce-test