name: Auto Version and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      auto_bump:
        description: 'Auto-bump version based on commit messages'
        required: false
        default: false
        type: boolean
      bump_type:
        description: 'Version bump type if auto_bump is false'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      bump-type: ${{ steps.analyze.outputs.bump-type }}
      should-bump: ${{ steps.analyze.outputs.should-bump }}
      release-notes: ${{ steps.analyze.outputs.release-notes }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze commits for version bump
        id: analyze
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Latest tag: $LATEST_TAG"
          
          # Get commits since last tag or all commits if no tag
          if [ -n "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" $LATEST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s")
          fi
          
          echo "Analyzing commits:"
          echo "$COMMITS"
          
          # Default to no bump
          SHOULD_BUMP=false
          BUMP_TYPE="patch"
          RELEASE_NOTES=""
          
          # Analyze commit messages for version bump hints
          if echo "$COMMITS" | grep -qiE "(major|breaking|breaking change)"; then
            BUMP_TYPE="major"
            SHOULD_BUMP=true
            echo "Detected MAJOR version bump"
          elif echo "$COMMITS" | grep -qiE "(minor|feature|feat)"; then
            BUMP_TYPE="minor"
            SHOULD_BUMP=true
            echo "Detected MINOR version bump"
          elif echo "$COMMITS" | grep -qiE "(patch|fix|bug|chore)"; then
            BUMP_TYPE="patch"
            SHOULD_BUMP=true
            echo "Detected PATCH version bump"
          fi
          
          # Generate release notes
          if [ "$SHOULD_BUMP" = "true" ]; then
            RELEASE_NOTES="# What's Changed\n\n"
            
            # Group commits by type
            FEATURES=$(echo "$COMMITS" | grep -iE "(feat|feature)" | sed 's/^/- /')
            FIXES=$(echo "$COMMITS" | grep -iE "(fix|bug)" | sed 's/^/- /')
            CHORES=$(echo "$COMMITS" | grep -iE "(chore|refactor|test)" | sed 's/^/- /')
            
            if [ -n "$FEATURES" ]; then
              RELEASE_NOTES="$RELEASE_NOTES## Features\n$FEATURES\n\n"
            fi
            
            if [ -n "$FIXES" ]; then
              RELEASE_NOTES="$RELEASE_NOTES## Bug Fixes\n$FIXES\n\n"
            fi
            
            if [ -n "$CHORES" ]; then
              RELEASE_NOTES="$RELEASE_NOTES## Other Changes\n$CHORES\n\n"
            fi
          fi
          
          # Override with manual input if provided
          if [ "${{ github.event.inputs.auto_bump }}" = "false" ] && [ -n "${{ github.event.inputs.bump_type }}" ]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            SHOULD_BUMP=true
            echo "Using manual bump type: $BUMP_TYPE"
          fi
          
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "should-bump=$SHOULD_BUMP" >> $GITHUB_OUTPUT
          echo "release-notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

  version-bump:
    runs-on: ubuntu-latest
    needs: analyze-commits
    if: ${{ needs.analyze-commits.outputs.should-bump == 'true' }}
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Bump version
        id: bump
        run: |
          # Read current version
          CURRENT_VERSION=$(node -e "console.log(require('./version.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump version based on analysis
          case "${{ needs.analyze-commits.outputs.bump-type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update version.json
          node -e "
            const version = require('./version.json');
            version.version = '$NEW_VERSION';
            require('fs').writeFileSync('./version.json', JSON.stringify(version, null, 2));
          "
          
          # Update Dockerfile with version label
          if grep -q "LABEL version=" Dockerfile; then
            sed -i "s/LABEL version=\".*\"/LABEL version=\"$NEW_VERSION\"/" Dockerfile
          else
            echo "LABEL version=\"$NEW_VERSION\"" >> Dockerfile
          fi
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json Dockerfile
          git commit -m "chore(version): bump version to $NEW_VERSION"
          
          # Push changes
          git push origin main
          
          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          git push origin "v$NEW_VERSION"
          
          # Set outputs
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.NEW_VERSION }}
          name: Release v${{ steps.bump.outputs.NEW_VERSION }}
          body: |
            ${{ needs.analyze-commits.outputs.release-notes }}
            
            ## Installation
            
            Pull the Docker image:
            ```bash
            docker pull ghcr.io/${{ github.repository }}:v${{ steps.bump.outputs.NEW_VERSION }}
            ```
            
            Or use docker-compose:
            ```bash
            export IMAGE_TAG=v${{ steps.bump.outputs.NEW_VERSION }}
            docker-compose up -d
            ```
            
            ## What's Changed
            Full changelog: https://github.com/${{ github.repository }}/compare/v$(node -e "const version = require('./version.json'); const parts = version.version.split('.'); parts[2] = Math.max(0, parseInt(parts[2]) - 1); console.log(parts.join('.'));")...v${{ steps.bump.outputs.NEW_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: false

  notify-team:
    runs-on: ubuntu-latest
    needs: [analyze-commits, version-bump]
    if: ${{ always() }}
    
    steps:
      - name: Notify on version bump
        if: ${{ needs.version-bump.result == 'success' }}
        run: |
          echo "::notice::Version bumped to ${{ needs.version-bump.outputs.NEW_VERSION }} and released successfully!"
          
      - name: Notify on no bump needed
        if: ${{ needs.analyze-commits.outputs.should-bump == 'false' }}
        run: |
          echo "::notice::No version bump needed based on commit analysis."
          
      - name: Notify on failure
        if: ${{ needs.version-bump.result == 'failure' }}
        run: |
          echo "::error::Version bump process failed. Check the logs for details."