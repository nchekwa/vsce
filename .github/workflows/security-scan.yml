name: Container Security Scan

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'
      - '**/*.sh'
  workflow_dispatch:
    inputs:
      image_ref:
        description: 'Image reference to scan (e.g., ghcr.io/owner/repo:tag)'
        required: false
        type: string
      severity:
        description: 'Minimum severity level to report'
        required: false
        default: 'MEDIUM'
        type: choice
        options:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-ref: ${{ steps.version.outputs.image-ref }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version and image reference
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${{ github.ref_name }}
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
          elif [[ "${{ github.event.inputs.image_ref }}" != "" ]]; then
            IMAGE_REF=${{ github.event.inputs.image_ref }}
            VERSION="manual"
          else
            VERSION=$(node -e "console.log(require('./version.json').version)")
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image-ref=$IMAGE_REF" >> $GITHUB_OUTPUT
          echo "Using image reference: $IMAGE_REF"

  trivy-scan:
    runs-on: ubuntu-latest
    needs: extract-version
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build test image (for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker build -t vsce-test .
          echo "IMAGE_REF=vsce-test" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_REF || needs.extract-version.outputs.image-ref }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: ${{ github.event.inputs.severity || 'CRITICAL,HIGH,MEDIUM' }}
          vuln-type: 'os,library'

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  snyk-scan:
    runs-on: ubuntu-latest
    needs: extract-version
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for Snyk token
        id: check-snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            echo "snyk_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Run Snyk to check Docker image for vulnerabilities
        if: steps.check-snyk.outputs.snyk_available == 'true'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ needs.extract-version.outputs.image-ref }}
          args: --severity-threshold=${{ github.event.inputs.severity || 'medium' }} --file=Dockerfile

      - name: Upload Snyk results to GitHub Security tab
        if: steps.check-snyk.outputs.snyk_available == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  dockle-scan:
    runs-on: ubuntu-latest
    needs: extract-version
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build test image (for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker build -t vsce-test .

      - name: Install Dockle
        run: |
          curl -sL https://github.com/goodwithtech/dockle/releases/download/v0.4.14/dockle_0.4.14_Linux-64bit.tar.gz | tar -xz
          sudo mv dockle /usr/local/bin/

      - name: Run Dockle container image linter
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            dockle --exit-code 1 --exit-level WARN vsce-test || echo "Dockle scan completed with warnings"
          else
            dockle --exit-code 1 --exit-level WARN ${{ needs.extract-version.outputs.image-ref }} || echo "Dockle scan completed with warnings"
          fi

  generate-report:
    runs-on: ubuntu-latest
    needs: [extract-version, trivy-scan, snyk-scan, dockle-scan]
    if: ${{ always() && needs.trivy-scan.result == 'success' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report for ${{ needs.extract-version.outputs.image-ref }}" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "Version: ${{ needs.extract-version.outputs.version }}" >> security-report.md
          echo "" >> security-report.md
          
          if [ -f "trivy-results.sarif" ]; then
            echo "## Trivy Vulnerability Scan Results" >> security-report.md
            echo "Trivy scan completed. Check the 'Security' tab for detailed results." >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "snyk.sarif" ]; then
            echo "## Snyk Security Scan Results" >> security-report.md
            echo "Snyk scan completed. Check the 'Security' tab for detailed results." >> security-report.md
            echo "" >> security-report.md
          fi
          
          echo "## Dockle Container Linting Results" >> security-report.md
          echo "Container image linting completed." >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "- All security scans have been completed" >> security-report.md
          echo "- Review the Security tab in this repository for detailed findings" >> security-report.md
          echo "- Address any CRITICAL or HIGH severity vulnerabilities found" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ needs.extract-version.outputs.version }}
          path: security-report.md